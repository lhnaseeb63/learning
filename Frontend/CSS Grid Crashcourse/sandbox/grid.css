* {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
}

body {
    font-family: 'Open Sans', sans-serif;
    font-size: 16px;
    line-height: 1.5;
    color: #333;
    background-color: #f5f5f5;
}

.container {
    max-width: 960px;
    margin: 100px auto;
    padding: 10px;
    background-color: rgba(127, 255, 212, 0.242);
    display: grid;
    /* grid-template-columns: repeat(3, 1fr);   */
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); 
    /*  responsiveness
    repeat(number of columns, size of columns)auto-fill just makes one long column for each row
    the minmax(minimum of 200px, max of 1fr)
    if you go below 200px it wraps*/
    /*Can do px, %, or fractions (fr) */
    /* column-gap: 10px;
    row-gap: 10px; */
    /* Can use column and row gap instead of margin on item */
    gap: 10px;

    /* Found that the columns expand with content, and any
    adjacent columns in the same row also expand  
    grid-auto-rows: 200px;
    make the rows 200px regardless of the content */

   /*
    grid-auto-rows: minmax(200px, auto);
        defines a size range >= min or <= max 
        So if one's content is a lot, can make it expand full height,
        but the other rows in that column are still at 200px*/

    /*grid-template-rows: repeat(3, 1fr);
     height is of whatever item has the most content */

     /*
    align-items: end; 
    
    align-items: stretch;
        Stretches according to whichever one
        has the most content
    align-items: start;
        align to top of item box and resizes to be item content
        size, not according to size of any other content 
    align-items: start;
        align to center of item box and resizes to be item content
        size, not according to size of any other content 
    align-items: end; 
        align to center of item box and resizes to be item content
        size, not according to size of any other content
    */

    /* 
    justify-content: end;
        can shift all of the content from one end of the container to
        the other. 
        This is more of a flexbox feature.  
        In order for us to see how it works we can't have the content
        taking up the whole space, meaning the items need to be the
        same size/ 
        */
}

.item {
    background-color: steelblue;
    color: #fff;
    font-size: 20px;
    padding: 20px;
    border: skyblue 1px solid;
}

/* .item:nth-of-type(1){
    // to select the first item without defining a new class 
    // can also align self, meaning we can align each 
    item independently. 
    
    height: 100px;
    width: 100px;
    
    align-self: center; //along y axis 
     justify-self: center ; // along x axis 

    

     Spanning  an item across a number of rows or columns
    Let's say we want it to span across (using the grid numbers in 
    dev tools) we want to span from 1 to 3 instead of the default 
    1 to 2. 
    background-color: black;
    
    grid-column-start: 1;
    grid-column-end: 3;
    grid-column: 1/3; //provide start and end
    grid-column: 1 / span 2; //spans 2 items 

} 

.item:nth-of-type(3){
    // let's say you want the row to span from line 2 to line 4 
    background-color: darkgray;
    grid-row: 2/4;
}

.item:nth-of-type(4){
    // let's say you want the row to span from line 2 to line 4 
    background-color: darkgray;
    grid-row: 2/4;
}
*/

/* responsiveness */
@media(max-width: 500px) {
    .container {
        grid-template-columns: 1fr;
        background-color: aqua;
    }
}